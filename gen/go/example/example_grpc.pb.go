// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: example/example.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleApiClient is the client API for ExampleApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleApiClient interface {
	// Gets a single message.
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*ExampleMessage, error)
	// Gets multiple Messages.
	BatchGetMessages(ctx context.Context, in *BatchGetMessagesRequest, opts ...grpc.CallOption) (ExampleApi_BatchGetMessagesClient, error)
	// Creates a new message.
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*ExampleMessage, error)
	// Deletes a message.
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type exampleApiClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleApiClient(cc grpc.ClientConnInterface) ExampleApiClient {
	return &exampleApiClient{cc}
}

func (c *exampleApiClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*ExampleMessage, error) {
	out := new(ExampleMessage)
	err := c.cc.Invoke(ctx, "/example.ExampleApi/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleApiClient) BatchGetMessages(ctx context.Context, in *BatchGetMessagesRequest, opts ...grpc.CallOption) (ExampleApi_BatchGetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleApi_ServiceDesc.Streams[0], "/example.ExampleApi/BatchGetMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleApiBatchGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleApi_BatchGetMessagesClient interface {
	Recv() (*BatchGetMessagesResponse, error)
	grpc.ClientStream
}

type exampleApiBatchGetMessagesClient struct {
	grpc.ClientStream
}

func (x *exampleApiBatchGetMessagesClient) Recv() (*BatchGetMessagesResponse, error) {
	m := new(BatchGetMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleApiClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*ExampleMessage, error) {
	out := new(ExampleMessage)
	err := c.cc.Invoke(ctx, "/example.ExampleApi/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleApiClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example.ExampleApi/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleApiServer is the server API for ExampleApi service.
// All implementations must embed UnimplementedExampleApiServer
// for forward compatibility
type ExampleApiServer interface {
	// Gets a single message.
	GetMessage(context.Context, *GetMessageRequest) (*ExampleMessage, error)
	// Gets multiple Messages.
	BatchGetMessages(*BatchGetMessagesRequest, ExampleApi_BatchGetMessagesServer) error
	// Creates a new message.
	CreateMessage(context.Context, *CreateMessageRequest) (*ExampleMessage, error)
	// Deletes a message.
	DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedExampleApiServer()
}

// UnimplementedExampleApiServer must be embedded to have forward compatible implementations.
type UnimplementedExampleApiServer struct {
}

func (UnimplementedExampleApiServer) GetMessage(context.Context, *GetMessageRequest) (*ExampleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedExampleApiServer) BatchGetMessages(*BatchGetMessagesRequest, ExampleApi_BatchGetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchGetMessages not implemented")
}
func (UnimplementedExampleApiServer) CreateMessage(context.Context, *CreateMessageRequest) (*ExampleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedExampleApiServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedExampleApiServer) mustEmbedUnimplementedExampleApiServer() {}

// UnsafeExampleApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleApiServer will
// result in compilation errors.
type UnsafeExampleApiServer interface {
	mustEmbedUnimplementedExampleApiServer()
}

func RegisterExampleApiServer(s grpc.ServiceRegistrar, srv ExampleApiServer) {
	s.RegisterService(&ExampleApi_ServiceDesc, srv)
}

func _ExampleApi_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleApiServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleApi/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleApiServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleApi_BatchGetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchGetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleApiServer).BatchGetMessages(m, &exampleApiBatchGetMessagesServer{stream})
}

type ExampleApi_BatchGetMessagesServer interface {
	Send(*BatchGetMessagesResponse) error
	grpc.ServerStream
}

type exampleApiBatchGetMessagesServer struct {
	grpc.ServerStream
}

func (x *exampleApiBatchGetMessagesServer) Send(m *BatchGetMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExampleApi_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleApiServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleApi/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleApiServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleApi_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleApiServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleApi/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleApiServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleApi_ServiceDesc is the grpc.ServiceDesc for ExampleApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleApi",
	HandlerType: (*ExampleApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _ExampleApi_GetMessage_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _ExampleApi_CreateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ExampleApi_DeleteMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchGetMessages",
			Handler:       _ExampleApi_BatchGetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example/example.proto",
}
